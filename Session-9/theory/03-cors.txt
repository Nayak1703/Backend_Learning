When using Axios (or any other HTTP client) in the backend to fetch data from a different domain, 
the browser often performs a "preflight" request before sending the actual request. This preflight 
request checks if the server allows requests from the origin (client’s domain) and whether the request 
method (GET, POST, etc.) is permitted.


Key headers sent during the preflight request include:

    1.  Access-Control-Allow-Origin: Specifies the origin of the client making the request.
    2.  Access-Control-Allow-Method: Indicates what type of request (GET, POST, etc.) the client wants to make.


On the server side, it checks if it allows that origin and the request method. If both are permitted, the server 
responds positively, allowing the actual request to proceed. If either check fails, the browser will block access, 
preventing the client from interacting with that domain.


If a Cross-Origin Resource Sharing (CORS) error occurs, it means the browser is enforcing the Same-Origin Policy, 
which restricts a web application to only access resources from the same domain (same protocol, domain, and port). 
If two domains differ by even a port (like localhost:8081 and localhost:8082), the browser sees them as separate 
origins and blocks the request for security reasons.

To solve this issue, CORS must be enabled on the server-side, allowing the browser to access the resources from 
different origins.


Here’s a breakdown of origin types:

    Same-origin: https://www.mywebsite.com/page (same domain)
    
    Cross-origin:
        https://www.anotherwebsite.com (different domain)
        http://www.mywebsite.com (different protocol)
        https://api.mywebsite.com (different subdomain)
        https://www.mywebsite.com:8080 (different port)


In short, CORS errors occur when the server does not allow requests from a different origin, and the solution lies 
in configuring the server to permit such requests.



======>     to solve CORS-Error in backend-serve    <======

Here's how to build a proxy server to access a backend server's data while hiding sensitive information like tokens 
that would otherwise be exposed in the frontend.

    Problem:
    When accessing a server’s data directly from the frontend, you need to use APIs and pass authorization tokens. 
    However, this exposes the token to anyone who can inspect the frontend code (e.g., via browser dev tools), 
    creating a security risk.

    Solution:
    Set up a proxy server that acts as an intermediary between the frontend and the backend. 
    This proxy server will handle the communication with the backend server, including token-based 
    authentication. The frontend will then interact only with the proxy server, which keeps the sensitive 
    information hidden.

    Steps:
    1.  Set up a basic proxy server: Install express and axios (for making requests to the backend) by running:
        npm i express axios
    
    2.  Create a proxy-server.js file: In this file, set up an Express server that will act as your proxy server.
        const express = require('express');
        const axios = require('axios');
        const cors = require('cors');

        const app = express();
        const port = 3001;

        // Enable CORS to allow requests from your frontend
        app.use(cors({
            origin: 'http://localhost:8081',  // Frontend's origin, use array [] from multiple origin
            credentials: true
        }));

        // Route to forward requests to the backend
        app.get('/api/data', async (req, res) => {
            try {
                // Make a request to the backend server with the token
                const response = await axios.get('http://backend-server-url/api/data', {
                    headers: {
                        Authorization: `Bearer YOUR_SECRET_TOKEN`
                    }
                });

                // Send the backend data to the frontend
                res.json(response.data);
            } catch (error) {
                console.error('Error fetching data from backend:', error);
                res.status(500).send('Error fetching data from backend');
            }
        });

        app.listen(port, () => {
            console.log(`Proxy server running at http://localhost:${port}`);
        });

How it works:
Your frontend will make a request to the proxy server (e.g., http://localhost:3001/api/data).
The proxy server will forward this request to the backend server, including the authorization token in the headers.
The backend server will respond with the data, which the proxy server will relay back to the frontend.
Since the frontend is only communicating with the proxy server, the token remains hidden and never exposed to the browser.
Frontend request: In your frontend, simply make a request to your proxy server:

        axios.get('http://localhost:3001/api/data', { withCredentials: true })
            .then(response => {
                console.log(response.data);
            })
            .catch(error => {
                console.error('Error:', error);
            });
Advantages:
    Token Security: The token is stored and used only on the proxy server, keeping it secure from exposure in the frontend.
    Backend Access: The proxy server can access the backend's data, even if the frontend is blocked from doing so directly 
                    due to CORS or other restrictions.

This method adds an extra layer of security and helps bypass CORS limitations while keeping sensitive information safe.



OR



    1.  install the CORS package using the command:                         npm i cors
    2.  In your index.js, import the cors package:                          const cors = require("cors");
    3.  To allow all domains to access the backend server, add this line:   app.use(cors());

    However, when logging in, if you encounter an error related to sending credentials (cookies), it's because the 
    preflight request is receiving the following response:

        Access-Control-Allow-Origin: "*"

    This means that while all origins are allowed, you’re also sending cookies from the client-side 
    (using { withCredentials: true }). In this case, you need to update the CORS configuration to:

        -   Allow specific domains (e.g., http://localhost:8081) instead of allowing all origins.
        -   Specify that you are accepting credentials (cookies) from that domain.

    To achieve this, modify your CORS configuration as follows:

        app.use(cors({
            origin: `http://localhost:8081`,    // Specify the allowed domain(s), or use an array for multiple origins
            credentials: true                   // Allow credentials (cookies) to be sent from the specified origin
        }));

    This setup ensures that the backend-server only allows requests from the specified domain and accepts 
    cookies/credentials from that origin.
